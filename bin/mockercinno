#!/usr/bin/env node
const commands = require('commander');
const glob = require('glob');
const chokidar = require('chokidar');
const fs = require('fs');
const path = require('path');

const logger = require('../lib/logger');
const manager = require('../lib/manager');
const server = require('../lib/server');
const mockStore = require('../lib/stores').mock;

commands
	.option('-f, --file <name>', 'File containing an array of mock schemas.')
	.option('-p, --pattern <glob>', 'File pattern for files containing mock schemas.')
	.option('--port <port>', 'Port for mockercinno to run on.', process.env.MOCK_PORT || 8080)
	.parse(process.argv)


if (commands.file) {
  const data = manager.import(commands.file);
	data && mockStore.insert(data);
}

if (commands.pattern) {
		const watcher = chokidar.watch(commands.pattern, {
			ignored: /(^|[\/\\])\../,
			persistent: true
		});

		watcher
	  	.on('add', path => {
				const data = manager.import(path);
				data && mockStore.insert(data);
			})
	  	.on('change', filePath => {
				logger.info(`${filePath} has changed!`);

				mockStore.reset({ file: filePath });
				manager.clearCache(filePath);
				logger.info("Reloading mockStore");
				const data = manager.import(filePath);
				data && mockStore.insert(data) && logger.info('Successfully reloaded');
			});
}

server.listen(commands.port, () => {
	console.log(`Mock Server started on port ${commands.port}!`);
});
